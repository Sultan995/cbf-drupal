diff --git a/date.field.inc b/date.field.inc
index a183dbf3979936775d460ca767a3671333bb329e..f612e5a9da70837890b66a1caed7fd6f809d54cf 100644
--- a/date.field.inc
+++ b/date.field.inc
@@ -345,16 +345,15 @@ function date_field_widget_info() {
  * Implements hook_field_load().
  */
 function date_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
-  $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
   $db_format = date_type_format($field['type']);
   $process = date_process_values($field);
   foreach ($entities as $id => $entity) {
     foreach ($items[$id] as $delta => &$item) {
       // If the file does not exist, mark the entire item as empty.
       if (is_array($item)) {
-        $timezone = isset($item['timezone']) ? $item['timezone'] : '';
-        $item['timezone'] = date_get_timezone($field['settings']['tz_handling'], $timezone);
-        $item['timezone_db'] = $timezone_db;
+        $item_timezone = isset($item['timezone']) ? $item['timezone'] : '';
+        $item['timezone'] = date_get_timezone($field['settings']['tz_handling'], $item_timezone);
+        $item['timezone_db'] = date_get_timezone_db($field['settings']['tz_handling'], $item_timezone);
         $item['date_type'] = $field['type'];
       }
     }
@@ -426,7 +425,7 @@ function date_field_presave($entity_type, $entity, $field, $instance, $langcode,
     $timezone = isset($item['timezone']) ? $item['timezone'] : '';
     if (is_array($item)) {
       $items[$delta]['timezone'] = date_get_timezone($field['settings']['tz_handling'], $timezone);
-      $items[$delta]['timezone_db'] = date_get_timezone_db($field['settings']['tz_handling']);
+      $items[$delta]['timezone_db'] = date_get_timezone_db($field['settings']['tz_handling'], $timezone);
       $items[$delta]['date_type'] = $field['type'];
     }
   }
diff --git a/date.info b/date.info
index 16ed1954422edf962568acd5dd64752b2aa1c60d..5dc3d51fd375507178c6a8ee8eb6ff1fc88c502e 100644
--- a/date.info
+++ b/date.info
@@ -24,4 +24,5 @@ files[] = tests/DateFieldTestBase.test
 files[] = tests/DateFieldTestCase.test
 files[] = tests/DateTimezoneTestCase.test
 files[] = tests/DateUiTestCase.test
+files[] = tests/DateUpdatesTestCase.test
 files[] = tests/DateValidationTestCase.test
diff --git a/date.install b/date.install
index a75b1ca3cb51c1bd769f3f3b9ff679e20b2c80dd..e979a37d07b692cb1946a1f2517abf541c6fd536 100644
--- a/date.install
+++ b/date.install
@@ -313,3 +313,120 @@ function date_update_7007() {
 function date_update_7200() {
   db_delete('system')->condition('name', 'date_migrate_example')->execute();
 }
+
+/**
+ * Convert date fields with setting "date's timezone" from UTC to the selected
+ * timezone. This is extremely problematic as it assumes values were stored in
+ * UTC in the first place, which is not necessarily true.
+ *
+ * This goes back to a long standing problem with the "date" timezone
+ * translation option in that it was badly defined - no indication was given
+ * on how it would work or on the implications of choosing one option over
+ * another. In addition, in 2014 the logic was changed so that data was stored
+ * differently, without an update script to make existing data match the new
+ * logic.
+ *
+ * @see https://www.drupal.org/project/date/issues/998076
+ */
+function date_update_7201(&$sandbox) {
+
+  return t('Do not update City Bible Forum dates');
+
+  if (!isset($sandbox['total'])) {
+    // Build a list of all date fields that have tz_handling set to "date".
+    $query = db_select('field_config', 'fc', array('fetch' => PDO::FETCH_ASSOC));
+    $query->fields('fc');
+    $query->condition(db_or()->condition('fc.type', 'date')->condition('fc.type', 'datetime'));
+    $results = $query->execute();
+    $sandbox['total'] = 0;
+    $sandbox['fields'] = array();
+    $sandbox['local_location'] = 0;
+    $sandbox['current_index'] = 0;
+    $sandbox['global_location'] = 0;
+    $sandbox['field_count_map'] = array();
+    $sandbox['field_granularity'] = array();
+    $sandbox['field_date_format'] = array();
+    foreach ($results as $record) {
+      $config = unserialize($record['data']);
+      if ($config['settings']['tz_handling'] == 'date') {
+        $field_name = $record['field_name'];
+        $date_format = '';
+        switch ($record['type']) {
+          case 'datetime':
+            $sandbox['field_date_format'][] = DATE_FORMAT_DATETIME;
+           break;
+          case 'date':
+            $sandbox['field_date_format'][] = DATE_FORMAT_ISO;
+            break;
+        }
+        $field_count = db_select('field_data_' . $field_name)
+          ->fields(NULL, array('entity_id'))
+          ->countQuery()
+          ->execute()
+          ->fetchField();
+        $sandbox['total'] += $field_count;
+        $sandbox['fields'][] = $field_name;
+        $sandbox['field_count_map'][] = $field_count;
+        $sandbox['field_granularity'][] = $config['settings']['granularity'];
+      }
+    }
+  }
+
+  // Fail early if there's nothing to do.
+  if (empty($sandbox['total'])) {
+    return t('No date fields needed to have their timezone data fixed.');
+  }
+
+  $records_per_iteration = 100;
+
+  // Loop over the fields list.
+  if (!empty($sandbox['fields'])) {
+    $field_name = $sandbox['fields'][$sandbox['current_index']];
+    $query2 = db_select('field_data_' . $field_name, 'fd', array('fetch' => PDO::FETCH_ASSOC));
+    $query2->fields('fd');
+    $query2->range($sandbox['local_location'], $records_per_iteration);
+    $results2 = $query2->execute();
+    foreach ($results2 as $record2) {
+      $timezone = $record2[$field_name . '_timezone'];
+      $value = new DateObject($record2[$field_name . '_value'], 'UTC');
+      $value->limitGranularity($sandbox['field_granularity'][$sandbox['current_index']]);
+      date_timezone_set($value, timezone_open($timezone));
+      $fields = array(
+        $field_name . '_value' => $value->format($sandbox['field_date_format'][$sandbox['current_index']]),
+      );
+      if (isset($record2[$field_name . '_value2'])) {
+        $value2 = new DateObject($record2[$field_name . '_value2'], 'UTC');
+        $value->limitGranularity($sandbox['field_granularity'][$sandbox['current_index']]);
+        date_timezone_set($value2, timezone_open($timezone));
+        $fields[$field_name . '_value2'] = $value2->format($sandbox['field_date_format'][$sandbox['current_index']]);
+      }
+      db_update('field_data_' . $field_name)
+        ->fields($fields)
+        ->condition('entity_id', $record2['entity_id'])
+        ->condition('revision_id', $record2['revision_id'])
+        ->condition('delta', $record2['delta'])
+        ->execute();
+      db_update('field_revision_' . $field_name)
+        ->fields($fields)
+        ->condition('entity_id', $record2['entity_id'])
+        ->condition('revision_id', $record2['revision_id'])
+        ->condition('delta', $record2['delta'])
+        ->execute();
+      $sandbox['local_location']++;
+      $sandbox['global_location']++;
+    }
+    if ($sandbox['local_location'] == $sandbox['field_count_map'][$sandbox['current_index']]) {
+      $sandbox['current_index']++;
+      $sandbox['local_location'] = 0;
+    }
+    $sandbox['#finished'] = ($sandbox['global_location'] / $sandbox['total']);
+  }
+  else {
+    $sandbox['#finished'] = 1;
+  }
+
+  if ($sandbox['#finished'] === 1) {
+    field_cache_clear();
+    drupal_set_message(t('Processed @fields date field entries', array('@fields' => $sandbox['total'])));
+  }
+}
diff --git a/date.module b/date.module
index b91e283a1dba53048a704d2ebfe47b3d716a6af0..b8c3bf0c0c92bdc7eb7bcf25fe50d9bbd5955049 100644
--- a/date.module
+++ b/date.module
@@ -229,13 +229,12 @@ function date_formatter_process($formatter, $entity_type, $entity, array $field,
 
   $granularity = date_granularity($field);
   $settings = $display['settings'];
-  $field_name = $field['field_name'];
   $format = date_formatter_format($formatter, $settings, $granularity, $langcode);
   if (!isset($field['settings']['tz_handling']) || $field['settings']['tz_handling'] !== 'utc') {
     $timezone = isset($item['timezone']) ? $item['timezone'] : '';
     $timezone = date_get_timezone($field['settings']['tz_handling'], $timezone);
   }
-  $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
+  $timezone_db = date_get_timezone_db($field['settings']['tz_handling'], $timezone);
   $db_format = date_type_format($field['type']);
   $process = date_process_values($field);
   foreach ($process as $processed) {
@@ -251,13 +250,16 @@ function date_formatter_process($formatter, $entity_type, $entity, array $field,
         $date = $item['db'][$processed];
       }
       else {
+        // Use the timezone value from the database.
         $date = new DateObject($item[$processed], $timezone_db, $db_format);
         $date->limitGranularity($field['settings']['granularity']);
       }
-
       $dates[$processed]['db']['object'] = $date;
       $dates[$processed]['db']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);
 
+      // Use a cloned object and set the timezone on the clone to avoid
+      // disturbing the "db" date object.
+      $date = clone $date;
       date_timezone_set($date, timezone_open($timezone));
       $dates[$processed]['local']['object'] = $date;
       $dates[$processed]['local']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);
diff --git a/date_admin.inc b/date_admin.inc
index 490e6269502bb1092cb1b2da5af37ee129069cff..5a76c63812996e341b97537c5990910b058b89d5 100644
--- a/date_admin.inc
+++ b/date_admin.inc
@@ -565,12 +565,14 @@ function _date_field_settings_form($field, $instance, $has_data) {
       ),
     ),
   );
-  $description = t('Select the timezone handling method for this date field.');
+  $handling_options = date_timezone_handling_options(TRUE);
+  $description = t("Select the timezone handling method for this date field:") .
+    $handling_options['description'];
   $form['tz_handling'] = array(
     '#type' => 'select',
-    '#title' => t('Time zone handling'),
+    '#title' => t('Timezone handling'),
     '#default_value' => $tz_handling,
-    '#options' => date_timezone_handling_options(),
+    '#options' => $handling_options['options'],
     '#description' => $description,
     '#attached' => array(
       'js' => array(drupal_get_path('module', 'date') . '/date_admin.js'),
@@ -605,7 +607,7 @@ function _date_field_settings_validate(&$form, &$form_state) {
     form_set_value($form['timezone_db'], '', $form_state);
   }
   else {
-    form_set_value($form['timezone_db'], date_get_timezone_db($field['settings']['tz_handling']), $form_state);
+    form_set_value($form['timezone_db'], date_get_timezone_db($field['settings']['tz_handling'], $form['timezone_db']), $form_state);
   }
 
   if ($field['settings']['tz_handling'] !== 'none' && !in_array('hour', array_filter($field['settings']['granularity']), TRUE)) {
@@ -638,12 +640,29 @@ function _date_field_settings_validate(&$form, &$form_state) {
  * dates where timezones are irrelevant, or anytime conversion is unnecessary or
  * undesirable.
  */
-function date_timezone_handling_options() {
-  return array(
-    'site' => t("Site's time zone"),
-    'date' => t("Date's time zone"),
-    'user' => t("User's time zone"),
+function date_timezone_handling_options($include_description = FALSE) {
+  $options = array(
+    'site' => t("Site's timezone"),
+    'date' => t("Date's timezone"),
+    'user' => t("User's timezone"),
     'utc'  => 'UTC',
-    'none' => t('No time zone conversion'),
+    'none' => t('No timezone conversion'),
+  );
+
+  if (!$include_description) {
+    return $options;
+  }
+
+  $options_description = array(
+    t("Site's time zone: Stores the date in UTC format and displays it using the site's time zone."),
+    t("Date's time zone: Stores and displays the date exactly as entered."),
+    t("User's time zone: Stores the date in UTC format and displays it using the user's time zone."),
+    t("UTC: Stores the date in UTC format and displays it in UTC format."),
+    t("No time zone conversion: Stores and display the date exactly as entered.")
+  );
+
+  return array(
+    'options' => $options,
+    'description' => theme('item_list', array('items' => $options_description)),
   );
 }
diff --git a/date_api/date_api.module b/date_api/date_api.module
index 73eb93b91de2e7ae5ac5d17576e8e609d91d5761..f3b3a4d0754ce86521c82027122fe913f7257951 100644
--- a/date_api/date_api.module
+++ b/date_api/date_api.module
@@ -2685,7 +2685,7 @@ function date_get_timezone($handling, $timezone = '') {
  * @return string
  *   The timezone string.
  */
-function date_get_timezone_db($handling, $timezone = NULL) {
+function date_get_timezone_db($handling, $timezone = '') {
   switch ($handling) {
     case 'utc':
     case 'site':
@@ -2695,7 +2695,7 @@ function date_get_timezone_db($handling, $timezone = NULL) {
       break;
 
     case 'date':
-      if ($timezone == NULL) {
+      if (empty($timezone)) {
         // This shouldn't happen, since it's meaning is undefined. But we need
         // to fall back to *something* that's a legal timezone.
         $timezone = date_default_timezone();
diff --git a/date_elements.inc b/date_elements.inc
index f207024e181d7ac876db00e7105c140a61d352e1..af89d6989d94cd085cb55a65e81d75f585c63288 100644
--- a/date_elements.inc
+++ b/date_elements.inc
@@ -173,7 +173,7 @@ function date_local_date($item, $timezone, $field, $instance, $part = 'value') {
   */
   // @codingStandardsIgnoreEnd
 
-  $date = new DateObject($value, date_get_timezone_db($field['settings']['tz_handling']));
+  $date = new DateObject($value, date_get_timezone_db($field['settings']['tz_handling'], $timezone));
   $date->limitGranularity($field['settings']['granularity']);
   if (empty($date)) {
     return NULL;
@@ -585,7 +585,7 @@ function date_combo_validate($element, &$form_state) {
   }
   else {
     $timezone = !empty($item[$tz_field]) ? $item[$tz_field] : $element['#date_timezone'];
-    $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
+    $timezone_db = date_get_timezone_db($field['settings']['tz_handling'], $timezone);
     $element[$from_field]['#date_timezone'] = $timezone;
     $from_date = date_input_date($field, $instance, $element[$from_field], $posted[$from_field]);
 
diff --git a/date_repeat_field/date_repeat_field.module b/date_repeat_field/date_repeat_field.module
index 11098915f4fa5b7b8f7ffbd287181229c5f5e5ef..3d5e3aeb71b101ad3293294a62b8d9e62cf3e008 100644
--- a/date_repeat_field/date_repeat_field.module
+++ b/date_repeat_field/date_repeat_field.module
@@ -463,14 +463,14 @@ function date_repeat_build_dates($rrule, $rrule_values, array $field = array(),
   // UTC, but we want localtime dates to do things like '+1 Tuesday', so adjust
   // back to localtime.
   $timezone = date_get_timezone($field['settings']['tz_handling'], $item['timezone']);
-  $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
+  $timezone_db = date_get_timezone_db($field['settings']['tz_handling'], $timezone);
   $start = new DateObject($item['value'], $timezone_db, date_type_format($field['type']));
   $start->limitGranularity($field['settings']['granularity']);
   if ($timezone != $timezone_db) {
     date_timezone_set($start, timezone_open($timezone));
   }
   if (!empty($item['value2']) && $item['value2'] != $item['value']) {
-    $end = new DateObject($item['value2'], date_get_timezone_db($field['settings']['tz_handling']), date_type_format($field['type']));
+    $end = new DateObject($item['value2'], date_get_timezone_db($field['settings']['tz_handling'], $timezone), date_type_format($field['type']));
     $end->limitGranularity($field['settings']['granularity']);
     date_timezone_set($end, timezone_open($timezone));
   }
diff --git a/tests/DateTimezoneTestCase.test b/tests/DateTimezoneTestCase.test
index 601ef8141c4561c29253278b84d86f3f26c9ddd6..e9546a2c47fd0ba49c15d17ea028441241500f84 100644
--- a/tests/DateTimezoneTestCase.test
+++ b/tests/DateTimezoneTestCase.test
@@ -327,7 +327,9 @@ class DateTimezoneTestCase extends DateFieldTestBase {
     $node = node_load(1);
     $this->verbose($node);
 
-    // Confirm the data is stored correctly.
+    // Confirm the data is stored correctly. When using the "date" timezone
+    // handling the data is stored as-is in the database, there won't be any
+    // conversion. This makes it very similar to the "none" option.
     $this->assertEqual($node->field_test[LANGUAGE_NONE][0]['value'], '2021-07-21 18:30:00');
     $this->assertEqual($node->field_test[LANGUAGE_NONE][0]['timezone'], 'America/Chicago');
     $this->assertEqual($node->field_test[LANGUAGE_NONE][0]['timezone_db'], 'America/Chicago');
@@ -361,12 +363,7 @@ class DateTimezoneTestCase extends DateFieldTestBase {
     // The "date" conversion logic does not change the time display based upon
     // the viewer's configured timezone, therefore the item should have the same
     // 6:30pm display as it did previously.
-    // @code
-    // $this->assertText('Wednesday, July 21, 2021 - 18:30');
-    // @endcode
-    // @todo This is incorrect, it should actually show 18:30.
-    // @see https://www.drupal.org/project/date/issues/998076
-    $this->assertText('Wednesday, July 21, 2021 - 17:30');
+    $this->assertText('Wednesday, July 21, 2021 - 18:30');
   }
 
   /**
diff --git a/tests/DateUpdatesTestCase.test b/tests/DateUpdatesTestCase.test
new file mode 100644
index 0000000000000000000000000000000000000000..449fb8319a3849bed6196781f268a556277df26b
--- /dev/null
+++ b/tests/DateUpdatesTestCase.test
@@ -0,0 +1,154 @@
+<?php
+
+/**
+ * @file
+ * Test updates for the Date module.
+ */
+
+/**
+ * Test updates for the Date module.
+ */
+class DateUpdatesTestCase extends DrupalWebTestCase {
+
+  /**
+   * Define this test class.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => t('Date updates'),
+      'description' => t('Confirm updates for Date work as intended.'),
+      'group' => 'date',
+      'dependencies' => array('date', 'features'),
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(array $modules = array()) {
+    $modules[] = 'date_all_day';
+    $modules[] = 'date_all_day_test_feature';
+    $modules[] = 'date_test_feature';
+    parent::setUp($modules);
+
+    // Error logging.
+    variable_set('error_level', 2);
+
+    // Log in as user 1, so that permissions are irrelevant.
+    $this->loginUser1();
+
+    // Clear the caches so that the field specs are properly loaded.
+    cache_clear_all();
+  }
+
+  /**
+   * Log in as user 1.
+   *
+   * The benefit of doing this is that it ignores permissions entirely, so the
+   * raw functionality can be tested.
+   */
+  protected function loginUser1() {
+    // Load user 1.
+    $account = user_load(1, TRUE);
+
+    // Reset the password.
+    $password = user_password();
+    $edit = array(
+      'pass' => $password,
+    );
+    user_save($account, $edit);
+    $account->pass_raw = $password;
+
+    // Login.
+    $this->drupalLogin($account);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function verbose($message, $title = NULL) {
+    // Handle arrays, objects, etc.
+    if (!is_string($message)) {
+      $message = "<pre>\n" . print_r($message, TRUE) . "\n</pre>\n";
+    }
+
+    // Optional title to go before the output.
+    if (!empty($title)) {
+      $title = '<h2>' . check_plain($title) . "</h2>\n";
+    }
+
+    parent::verbose($title . $message);
+  }
+
+  /**
+   * Test update 7201.
+   */
+  public function testUpdate7201() {
+    // Load the install file, so that the update script is available.
+    module_load_include('install', 'date');
+    $this->assertEqual(function_exists('date_update_7201'), TRUE, 'Update 7201 exists.');
+
+    // Create a sample node.
+    $this->drupalGet('node/add/date-all-day-test');
+    $this->assertResponse(200);
+    $this->assertText('Create Date Test');
+
+    $edit = array(
+      'title' => 'Test All Day option',
+      // This field is required.
+      // 'field_datetime_range[und][0][value2][date]' => '2020-09-07 08:00:00',
+      // The All-Day field.
+      'field_date_all_day[und][0][all_day]' => TRUE,
+      'field_date_all_day[und][0][value][year]' => 2020,
+      'field_date_all_day[und][0][value][month]' => 8,
+      'field_date_all_day[und][0][value][day]' => 30,
+    );
+    $this->drupalPost(NULL, $edit, 'Save');
+    $this->assertResponse(200);
+    // Make sure the form submitted.
+    $this->assertNoText('Create Date Test');
+
+    // Check that the node exists in the database.
+    $node = $this->drupalGetNodeByTitle($edit['title']);
+    $this->assertTrue($node, 'Node found in database.');
+    $this->verbose($node);
+
+    // Update the field so it's stored the old way.
+    $node->field_date_all_day[LANGUAGE_NONE][0]['value'] = '2020-08-30 00:00:00';
+    node_save($node);
+
+    // Reload the node and confirm that it has the old value stored.
+    $node = node_load($node->nid, NULL, TRUE);
+    $this->verbose($node);
+    $this->assertEqual($node->field_date_all_day[LANGUAGE_NONE][0]['value'], '2020-08-30 00:00:00');
+
+    // Load the code, confirm the data is invalid.
+    $this->drupalGet('node/' . $node->nid);
+    $this->assertResponse(200);
+    $this->assertText($edit['title']);
+    $this->assertText('Date All Day');
+    $this->assertNoText('Sunday, August 30, 2020 (All day)');
+
+    // Load the node's edit form to confirm the values are incorrect.
+    $this->drupalGet('node/' . $node->nid . '/edit');
+    $this->assertResponse(200);
+
+    // Execute the update function.
+    $results = date_update_7201();
+    $this->assertTrue($results);
+    $this->verbose($results);
+
+    // Reload the node and confirm that it has the old value stored.
+    $node = node_load($node->nid, NULL, TRUE);
+    $this->verbose($node);
+    // The expected timestamp is relative to the increment value, which is set
+    // to 15 minutes for this field.
+    $this->assertEqual($node->field_date_all_day[LANGUAGE_NONE][0]['value'], '2020-08-30 23:45:59');
+
+    // Load the node again, confirm the data is now valid.
+    $this->drupalGet('node/' . $node->nid);
+    $this->assertText('Date All Day:');
+    $this->assertText('Sunday, August 30, 2020 (All day)');
+  }
+
+}
