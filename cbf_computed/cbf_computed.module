<?php

/*
 * This function is called by CCK Computed Field to compute the value of Field Sort Order.
 * The value is set to the timestamp of the Field Episode Date or the Field Event Date.
 * The Event date takes preference, though no entity should have both being non-empty.
 * The timestamp used is the start time.
 * If the event date is repeating then apply this logic to the first date in the future.
 * If no events are in the future, use the date of the last one in the past.
 */
function computed_field_field_sort_order_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $current_time = strtotime('now');
  $timestamp = 0;

  // Calculate the sort order from the (non-repeating) Episode Date
  $field_episode_date = field_get_items($entity_type, $entity, 'field_episode_date');
  if (!empty($field_episode_date)) {
    $episode = reset($field_episode_date);
    if (!empty($episode['value'])) {
      $start_time = new DateObject($episode['value'], $episode['timezone']);
      $timestamp = strtotime($start_time->format('Y-m-d H:i:s O'));
    }
  }

  // Calculate the sort order from the (repeating) Event Date
  $field_event_date = field_get_items($entity_type, $entity, 'field_event_date');
  if (!empty($field_event_date)) {
    foreach ($field_event_date as $event_occurrence) {
      $start_time = new DateObject($event_occurrence['value'], $event_occurrence['timezone']);
      $timestamp = strtotime($start_time->format('Y-m-d H:i:s O'));

      $end_time = new DateObject($event_occurrence['value2'], $event_occurrence['timezone']);
      $endstamp = strtotime($end_time->format('Y-m-d H:i:s O'));

      if ($endstamp > $current_time) {
        break;
      }
    }
  }

  $entity_field[0]['value'] = $timestamp;
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Sort Order.
 * It returns a string of the form '2011-10-22 22:41:25 +1100'.
 */
function computed_field_field_sort_order_display($field, $entity_field_item) {
  $start_time = new DateObject($entity_field_item['value'], 'UTC');
  return $start_time->format('Y-m-d H:i:s O');
}

/*
 * This function is called by CCK Computed Field to compute the value of Field Next Action.
 * The value is set to the timestamp of the Field Episode Date or the Field Event Date.
 * The Event date takes preference, though no entity should have both being non-empty.
 * The timestamp used is the start time for episodes and the end time for events.
 * If the event date is repeating then apply this logic to the first date in the future.
 * If the timestamp is in the past then next action is zero (there is no next action).
 */
function computed_field_field_next_action_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $current_time = strtotime('now');
  $timestamp = 0;

  // Calculate the next action from the (non-repeating) Episode Date
  $field_episode_date = field_get_items($entity_type, $entity, 'field_episode_date');
  if (!empty($field_episode_date)) {
    $episode = reset($field_episode_date);
    if (!empty($episode['value'])) {
      $start_time = new DateObject($episode['value'], $episode['timezone']);
      $timestamp = strtotime($start_time->format('Y-m-d H:i:s O'));
    }
  }

  // Calculate the next action from the (repeating) Event Date
  $field_event_date = field_get_items($entity_type, $entity, 'field_event_date');
  if (!empty($field_event_date)) {
    foreach ($field_event_date as $event_occurrence) {
      $end_time = new DateObject($event_occurrence['value2'], $event_occurrence['timezone']);
      $timestamp = strtotime($end_time->format('Y-m-d H:i:s O'));

      if ($timestamp > $current_time) {
        break;
      }
    }
  }

  // If the timestamp is in the past, then set the next action to zero (ie, no action)
  if ($timestamp <= $current_time) {
    $timestamp = 0;
  }

  $entity_field[0]['value'] = $timestamp;
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Next Action.
 * It returns a string of the form '2011-10-22 22:41:25 +1100'.
 */
function computed_field_field_next_action_display($field, $entity_field_item) {
  $end_time = new DateObject($entity_field_item['value'], 'UTC');
  return $end_time->format('Y-m-d H:i:s O');
}

/*
 * Calculate date text for an entity that contains either an Episode Date field or an
 * Event Date field. The Event Date takes precedence (though no anticipated content will
 * contain both)
 *
 * If the entity contains an Episode Date, the text is empty for future dates. Otherwise
 * it is the date.
 *
 * If all occurrences of the event are in the past, this field is the empty string.
 * Else, show the first future occurrence, along with every other occurrence in the
 *  7 days after that occurrence.
 * If the first future occurrence is in the next 7 days, show just the weekday, else
 *  show the weekday and date.
 * If there are previous repeats of this event, prefix the date with 'Next on '.
 * If there are no previous repeats, and there are subsequent repeats that are not listed,
 * prefix the date with 'Starts on '.
 * Show the start time, unless it is midnight.
 */
function _computed_field_date_text_compute($entity_type, $entity) {
  $current_time = strtotime('now');
  /*
   * $seven_days is 7 24-hour days except when daylight savings starts between
   * the next event and the one after that. Subtracting 1 hour from 24*7 allows
   * us to include all events occuring within 7 days of the next one.
   */
  $seven_days   = (24*7 - 1) * 60 * 60;
  $startstamp   = 0;
  $endstamp     = 0;
  $upperlimit   = 0;
  $previous     = 0;
  $subsequent   = 0;
  $date_future  = 'D j M';
  $date_past    = 'j M Y';
  $time_format  = 'g.ia';
  $midnight     = '12am';
  $date_text    = false;
  $time_text    = false;
  $nationalTimeText = false;
  $first_text   = false;
  $last_text    = false;

  // Calculate the date text from the (non-repeating) Episode Date
  $field_episode_date = field_get_items($entity_type, $entity, 'field_episode_date');
  if (!empty($field_episode_date)) {
    $episode = $field_episode_date[0];
    if (!empty($episode['value'])) {
      $start_time = new DateObject($episode['value'], $episode['timezone']);
      $startstamp = strtotime($start_time->format('Y-m-d H:i:s O'));
      if ($startstamp <= $current_time) {
        $first_text = $start_time->format($date_past);
        $last_text = $first_text;
      }
    }
  }

  // Calculate the date text from the (perhaps-repeating) Event Date
  $field_event_date = field_get_items($entity_type, $entity, 'field_event_date');
  if (!empty($field_event_date)) {
    foreach ($field_event_date as $event_occurrence) {
      $start_time = new DateObject($event_occurrence['value'], $event_occurrence['timezone']);
      $startstamp = strtotime($start_time->format('Y-m-d H:i:s O'));

      $end_time = new DateObject($event_occurrence['value2'], $event_occurrence['timezone']);
      $endstamp = strtotime($end_time->format('Y-m-d H:i:s O'));

      if ($time_text === false && $endstamp > $current_time) {
        $time_text = str_replace('.00', '', $start_time->format($time_format));
        if ($time_text != $midnight) {
          $time_text .= '-' . str_replace('.00', '', $end_time->format($time_format));

          $ministryCentre = field_get_items($entity_type, $entity, 'taxonomy_vocabulary_1');
          if (empty($ministryCentre)) {
            $nationalTime = [];
            $query = new EntityFieldQuery();
            $query
              ->entityCondition('entity_type', 'taxonomy_term')
              ->entityCondition('bundle', 'vocabulary_1');
            $result = $query->execute();
            foreach ($result as $entityType => $entities) {
              $terms = taxonomy_term_load_multiple(array_keys($entities));
              foreach ($terms as $term) {
                $tz = 'Australia/' . $term->name;
                $time = new DateObject($startstamp, $tz);
                $from = str_replace('.00', '', $time->format($time_format));
                $time = new DateObject($endstamp, $tz);
                $to = str_replace('.00', '', $time->format($time_format));
                $tzOffset = (int) $time->format('O');
                $tzAbbreviation = $time->format('T');
                if (empty($nationalTime[$tzOffset])) {
                  $nationalTime[$tzOffset] = [
                    'tz' => $tzAbbreviation,
                    'time' => $from . '-' . $to,
                    'state' => $term->description,
                  ];
                }
                else {
                  $nationalTime[$tzOffset]['state'] .= ', ' . $term->description;
                }
              }
            }

            ksort($nationalTime);
            $nationalTime = array_reverse($nationalTime, true);

            $nationalTimeText = '';
            foreach ($nationalTime as $tzOffset => $tzTime) {
              $nationalTimeText .=
                '<div class="tz">' .
                '<div class="tz-city">' . $tzTime['state'] . '</div>' .
                '<div class="tz-time">' . $tzTime['time'] . '</div>' .
                '</div>';
            }
          }
        }
      }

      if ($upperlimit == 0 && $endstamp > $current_time) {
        $upperlimit = $startstamp + $seven_days;
      }

      if ($endstamp <= $current_time) {
        $previous++;
        if ($first_text === false) {
          $first_text = $start_time->format($date_past);
        }
        $last_text = $end_time->format($date_past);
      }
      else if ($startstamp >= $upperlimit) {
        $subsequent++;
      }
      else {
        $start_date_text = $start_time->format($date_future);
        $end_date_text = $end_time->format($date_future);

        if ($start_date_text == $end_date_text) {
          $this_date_text = $start_date_text;
        }
        else {
          $this_date_text = $start_date_text . ' to ' . $end_date_text;
          $time_text = $midnight;
        }

        if ($date_text === false) {
          $date_text = $this_date_text;
        }
        else {
          $date_text .= ', ' . $this_date_text;
        }
      }
    }
  }

  if ($date_text === false) {
    if ($first_text <> $last_text) {
      $date_text = 'Finished on ' . $last_text;
    }
    else {
      $date_text = $last_text;
    }
  }
  else {
    if ($previous > 0) {
      $date_text = 'Next on ' . $date_text;
    }
    else if ($subsequent > 0) {
      $date_text = 'Starts on ' . $date_text;
    }
  }

  $result = [];
  if ($date_text === false) {
    $result['field_date_text'] =
    $result['field_national_date_text'] = '';
  }
  else if ($time_text === false || $time_text == $midnight) {
    $result['field_date_text'] =
    $result['field_national_date_text'] = $date_text;
  }
  else if ($nationalTimeText === false) {
    $result['field_date_text'] =
    $result['field_national_date_text'] = $date_text . ', ' . $time_text;
  }
  else {
    $result['field_date_text'] = $date_text;
    $result['field_national_date_text'] =
      '<div class="cbf-date">' . $date_text . '</div>' .
      '<div class="cbf-time">' . $nationalTimeText . '</div>';
  }

  return $result;
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Date Text.
 */
function computed_field_field_date_text_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $text = _computed_field_date_text_compute($entity_type, $entity);
  $entity_field[0]['value'] = $text['field_date_text'];
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Date Text.
 */
function computed_field_field_date_text_display($field, $entity_field_item) {
  return $entity_field_item['value'];
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Date Text.
 */
function computed_field_field_national_date_text_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $text = _computed_field_date_text_compute($entity_type, $entity);
  $entity_field[0]['value'] = $text['field_national_date_text'];
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Date Text.
 */
function computed_field_field_national_date_text_display($field, $entity_field_item) {
  return $entity_field_item['value'];
}

/*
 * This function is called by CCK Computed Field to compute the value of Field Is Audio.
 */
function computed_field_field_is_audio_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_content = field_get_items($entity_type, $entity, 'field_content');
  if (!empty($field_content)) {
    $entity_field[0]['value'] = 1;
  }
  else {
    $entity_field[0]['value'] = 0;
  }
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Is Audio.
 */
function computed_field_field_is_audio_display($field, $entity_field_item, $entity_lang, $langcode) {
  if ($entity_field_item['value'] != 0) {
    return 'Yes';
  }
  else {
    return 'No';
  }
}

/*
 * This function is called by CCK Computed Field to compute the value of Field Is Video.
 */
function computed_field_field_is_video_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_video = field_get_items($entity_type, $entity, 'field_video');
  if (!empty($field_video)) {
    $entity_field[0]['value'] = 1;
  }
  else {
    $entity_field[0]['value'] = 0;
  }
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Is Video.
 */
function computed_field_field_is_video_display($field, $entity_field_item, $entity_lang, $langcode) {
  if ($entity_field_item['value'] != 0) {
    return 'Yes';
  }
  else {
    return 'No';
  }
}

/*
 * This function is called by CCK Computed Field to compute the value of Field Is Text.
 */
function computed_field_field_is_text_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_attachment = field_get_items($entity_type, $entity, 'field_attachment');
  if (!empty($field_attachment)) {
    $entity_field[0]['value'] = 1;
  }
  else {
    $entity_field[0]['value'] = 0;
  }
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Resource Type.
 */
function computed_field_field_resource_type_display($field, $entity_field_item, $entity_lang, $langcode) {
  if (stripos($entity_field_item['value'], 'o') !== false) {
    return '<i class="fal fa-fw fa-book"></i>';
  }
  if (stripos($entity_field_item['value'], 'v') !== false) {
    return '<i class="fal fa-fw fa-video"></i>';
  }
  if (stripos($entity_field_item['value'], 'a') !== false) {
    return '<i class="fal fa-fw fa-microphone"></i>';
  }
  if (stripos($entity_field_item['value'], 'd') !== false) {
    return '<i class="fal fa-fw fa-file-pdf"></i>';
  }
  if (stripos($entity_field_item['value'], 't') !== false) {
    return '<i class="fal fa-fw fa-file-alt"></i>';
  }
  return '';
}

/*
 * This function is called by CCK Computed Field to compute the value of Field Resource Type.
 */
function computed_field_field_resource_type_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $field_order_url = field_get_items($entity_type, $entity, 'field_order_url');
  $field_video = field_get_items($entity_type, $entity, 'field_video');
  $field_content = field_get_items($entity_type, $entity, 'field_content');
  $field_attachment = field_get_items($entity_type, $entity, 'field_attachment');

  $entity_field[0]['value'] = '';
  if (!empty($field_order_url)) {
    $entity_field[0]['value'] .= 'o';
  }
  if (!empty($field_video)) {
    $entity_field[0]['value'] .= 'v';
  }
  if (!empty($field_content)) {
    $entity_field[0]['value'] .= 'a';
  }
  if (!empty($field_attachment)) {
    $entity_field[0]['value'] .= 'd';
  }
  if ($entity_type == 'node' && $entity->type == 'blog') {
    $entity_field[0]['value'] .= 't';
  }
}

/*
 * This function is called by CCK Computed Field to generate the display text of Field Is Text.
 */
function computed_field_field_is_text_display($field, $entity_field_item, $entity_lang, $langcode) {
  if ($entity_field_item['value'] != 0) {
    return 'Yes';
  }
  else {
    return 'No';
  }
}
