<?php

/******************************************************************************
 * EXTERNAL FUNCTIONS
 */

/*
 * Generates the HubSpot form script and cases it for later use
 */
function cbf_hubspot_script($formType, $formId) {

  if (!$formType && !$formId) {
    return;
  }

  switch ($formType) {

    case 'HubSpot':
      $portalId = variable_get('hubspot_portal_id');
      cbf_hubspot_script_cache(
        "<script charset='utf-8' type='text/javascript' src='//js.hsforms.net/forms/embed/v2.js'></script>
        <script>
          hbspt.forms.create({
            region: 'na1',
            portalId: '$portalId',
            formId: '$formId'
          });
        </script>");
      break;

    case 'DepositFix':
      $portalId = variable_get('depositfix_portal_id');
      cbf_hubspot_script_cache(
        "<script id='df-widget-js' src='https://widgets.depositfix.com/v1/app.min.js?v2'></script>
        <script id='df-script' type='text/javascript'>
          DepositFixForm.init({
            portalId: '$portalId',
            formId: '$formId'
          });
        </script>");
      break;

    default:
      break;
  }
}

/*
 * Records a HubSpot $script for later use
 * Returns the script if no $script is supplied
 */
function cbf_hubspot_script_cache($script = null) {

  $cache = &drupal_static(__FUNCTION__);
  if ($script) {
    $cache = $script;
  }
  return $cache;
}

/******************************************************************************
 * HOOK IMPLEMENTATIONS
 */

/*
 * Implements hook_views_post_execute.
 *
 * https://api.drupal.org/api/views/views.api.php/function/hook_views_post_execute/7.x-3.x
 *
 *  "This hook is called right after the execute process. The query has been executed,
 *   but the pre_render() phase has not yet happened for handlers.
 *
 *  "Adding output to the view can be accomplished by placing text on $view->attachment_before
 *   and $view->attachment_after. Altering the content can be achieved by editing the items of
 *   $view->result"
 */
function cbf_hubspot_views_post_execute(&$view) {

  if ($view->name == 'cbf2019_hubspot_form') {

    foreach ($view->result as $result) {
      $formType = $result->field_field_hubspot_form_type[0]['rendered']['#markup'] ?? null;
      $formId = $result->field_field_title[0]['rendered']['#markup'] ?? null;
      break; /* Only one form! */
    }

    cbf_hubspot_script($formType, $formId);
  }
}

/*
 * Implements hook_node_validate()
 *
 * "Perform node validation before a node is created or updated. This hook is
 * invoked from node_validate(), after a user has finished editing the node and
 * is previewing or submitting it. It is invoked at the end of all the standard
 * validation steps, and after the type-specific hook_validate() is invoked. To
 * indicate a validation error, use form_set_error(). Note: Changes made to the
 * $node object within your hook implementation will have no effect. The
 * preferred method to change a node's content is to use hook_node_presave()
 * instead. If it is really necessary to change the node at the validate stage,
 * you can use form_set_value()"
 */
function cbf_hubspot_node_validate($node, $form, &$form_state) {

  $hubspotForms = cbf_field_get_items('node', $node, 'field_hubspot_form', 'entity', []);

  foreach ($hubspotForms as $i => $hubspotForm) {

    if (is_object($hubspotForm) && ($hubspotForm->removed ?? 0) != 1) {

      /*
       * If the field_description has content, check that this can fill field_title
       * and field_hubspot_form_type, otherwise check field_hubspot_form_type and
       * field_title are set, otherwise throw an error
       */
      $formDetailsRequired = true;

      $formEmbed = cbf_field_get_items('paragraphs_item', $hubspotForm, 'field_description', 'value', false);

      if ($formEmbed) {

        $embedded = _cbf_hubspot_form_embed($formEmbed);

        if ($embedded['form type'] && $embedded['form id']) {

          $formDetailsRequired = false;
        }
      }

      if ($formDetailsRequired) {

        /*
         * Since field_description is empty or incomplete, the field_title and
         * field_hubspot_form_type become mandatory
         */
        $formType = cbf_field_get_items('paragraphs_item', $hubspotForm, 'field_hubspot_form_type', 'tid', false);
        $formType = taxonomy_term_load($formType);
        $formType = $formType->name;

        if (empty($formType)) {

          $element = "field_hubspot_form][und][$i][field_hubspot_form_type][und][0][tid";
          form_set_error($element, 'Need to tell us the form type either explicitly or via the Embed code');
        }

        $formId = cbf_field_get_items('paragraphs_item', $hubspotForm, 'field_title', 'value', false);
        $formId = trim($formId);

        if (empty($formId)) {

          $element = "field_hubspot_form][und][$i][field_title][und][0][value";
          form_set_error($element, 'Need to tell us the form ID either explicitly or via the Embed code');
        }
      }
    }
  }
}

/*
 * Implements hook_entity_presave
 *
 * "Act on an entity before it is about to be created or updated."
 *
 */
function cbf_hubspot_entity_presave($entity, $type) {
  /*
   * If field_description has content, check that it can fill field_title and
   * field_hubspot_form_type: if so, do it and then empty field_description
   */
  if ($type == 'paragraphs_item' && $entity->bundle == 'hubspot_form') {

    $formEmbed = cbf_field_get_items($type, $entity, 'field_description', 'value', false);

    if ($formEmbed) {

      $embedded = _cbf_hubspot_form_embed($formEmbed);

      if ($embedded['form type']) {

        $formType = taxonomy_get_term_by_name($embedded['form type'], 'hubspot_form_type');
        $formType = reset($formType);
        $entity->field_hubspot_form_type['und'][0]['tid'] = $formType->tid;
      }

      if ($embedded['form id']) {

        $entity->field_title['und'][0]['value'] = $embedded['form id'];
      }

      $entity->field_description['und'][0]['value'] = '';
    }
  }
}

/*
 * Implements hook_form_alter
 *
 * "Perform alterations before a form is rendered."
 */
function cbf_hubspot_form_alter(&$form, &$form_state, $form_id) {

  $type = $form['#node']->type ?? '';
  $comment = $form_state['comment'] ?? null;

  if ($type == 'webform' || $comment || $form_id == 'contact_site_form') {
    _cbf_hubspot_is_incompatible_form_on_page(true);
  }
}

/*
 * Implements hook_page_alter
 *
 * "Perform alterations before a page is rendered.
 *
 * Use this hook when you want to remove or alter elements at the page level,
 * or add elements at the page level that depend on an other module's elements
 * (this hook runs after hook_page_build())."
 *
 */
function cbf_hubspot_page_alter(&$page) {

  /*
   * hubspot_page_build() sets $page['page_bottom']['hubspot_code'] for all
   * users.
   *
   * Leave it set if there is a HubSpot form on the page
   * Unset it for Staff who are logged in.
   * Unset it for Staff who are logging in.
   * Unset it if there is a Drupal webform on the page
   * Unset it if there is a Comment form on the page
   */

  if (user_is_anonymous()) {

    /*
     * For anonymous users, don't disable tracking unless it is needed
     */
    $disableHubSpotTracker = false;

    if (
      (arg(0) == 'user') ||
      (arg(0) == 'system' && arg(1) == 'tfa')
    ) {
      $disableHubSpotTracker = true;
    }

    if (_cbf_hubspot_is_incompatible_form_on_page()) {
      $disableHubSpotTracker = true;
    }
  }
  else {

    /*
     * For logged in users, disable tracking unless it is needed
     */
    $disableHubSpotTracker = true;

    if (cbf_hubspot_script_cache()) {
      $disableHubSpotTracker = false;
    }
  }

  if ($disableHubSpotTracker) {
    unset($page['page_bottom']['hubspot_code']);
  }
}

/******************************************************************************
 * INTERNAL FUNCTIONS
 */

function _cbf_hubspot_form_embed(string $formEmbed) {

  $patterns = [
    'HubSpot' => '!js\.hsforms\.net.+formId: +[\'"]([-0-9a-fA-F]+)[\'"]!is',
    'DepositFix' => '!widgets\.depositfix\.com.+formId: +[\'"]([-0-9a-fA-F]+)[\'"]!is',
  ];

  $result = [
    'form type' => null,
    'form id' => null,
  ];

  foreach ($patterns as $type => $pattern) {

    $matches = [];
    preg_match($pattern, $formEmbed, $matches);

    if (!empty($matches) && !empty($matches[1])) {

      $result = [
        'form type' => $type,
        'form id' => $matches[1],
      ];
      break;
    }
  }

  return $result;
}

/*
 * Records if a form is $present or not
 * If no argument is supplied you get the answer
 */
function _cbf_hubspot_is_incompatible_form_on_page($present = null) {

  $cache = &drupal_static(__FUNCTION__);
  if (isset($present)) {
    $cache = $present;
  }
  return $cache;
}
